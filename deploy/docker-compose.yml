# ============================================================================
# ShivX Docker Compose - Full Stack
# ============================================================================
# Services: ShivX API, PostgreSQL, Redis, Prometheus, Grafana
# ============================================================================

version: '3.8'

services:
  # ==========================================================================
  # ShivX Application
  # ==========================================================================
  shivx:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    container_name: shivx-app
    ports:
      - "8000:8000"
      - "9090:9090"
    environment:
      - SHIVX_ENV=production
      - SHIVX_DATABASE_URL=postgresql://shivx:${POSTGRES_PASSWORD:-changeme}@postgres:5432/shivx?sslmode=prefer
      - SHIVX_REDIS_URL=redis://${REDIS_PASSWORD:+:${REDIS_PASSWORD}@}redis:6379/0
      - SHIVX_OTEL_ENABLED=true
      - SHIVX_OTEL_EXPORTER_ENDPOINT=http://jaeger:4317
    env_file:
      - ../.env
    depends_on:
      - postgres
      - redis
    networks:
      - shivx-network
    restart: unless-stopped
    volumes:
      - shivx-logs:/app/logs
      - shivx-data:/app/data
      - shivx-models:/app/models

  # ==========================================================================
  # PostgreSQL Database
  # ==========================================================================
  postgres:
    image: postgres:15-alpine
    container_name: shivx-postgres
    environment:
      POSTGRES_USER: shivx
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}  # Override in production with secrets
      POSTGRES_DB: shivx
    ports:
      - "5432:5432"
    networks:
      - shivx-network
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./secrets/postgres:/var/lib/postgresql/certs:ro
      - postgres-wal-archive:/var/lib/postgresql/wal_archive
      - postgres-logs:/var/lib/postgresql/logs
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
      - "-c"
      - "hba_file=/etc/postgresql/pg_hba.conf"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shivx"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================================================
  # Redis Cache
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: shivx-redis
    ports:
      - "6379:6379"
    networks:
      - shivx-network
    restart: unless-stopped
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================================================
  # Prometheus Monitoring
  # ==========================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: shivx-prometheus
    ports:
      - "9091:9090"
    networks:
      - shivx-network
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./alerting-rules.yml:/etc/prometheus/alerting-rules.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'

  # ==========================================================================
  # Alertmanager
  # ==========================================================================
  alertmanager:
    image: prom/alertmanager:latest
    container_name: shivx-alertmanager
    ports:
      - "9093:9093"
    networks:
      - shivx-network
    restart: unless-stopped
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    environment:
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - PAGERDUTY_INTEGRATION_KEY=${PAGERDUTY_INTEGRATION_KEY:-}

  # ==========================================================================
  # Grafana Dashboards
  # ==========================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: shivx-grafana
    ports:
      - "3000:3000"
    networks:
      - shivx-network
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}  # Override in production with secrets
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

  # ==========================================================================
  # Nginx Reverse Proxy with SSL/TLS
  # ==========================================================================
  nginx:
    image: nginx:alpine
    container_name: shivx-nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - shivx-network
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
      - certbot-webroot:/var/www/certbot:ro
    depends_on:
      - shivx
      - grafana
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/api/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # Certbot for Let's Encrypt (optional for production)
  # ==========================================================================
  certbot:
    image: certbot/certbot:latest
    container_name: shivx-certbot
    volumes:
      - certbot-certs:/etc/letsencrypt
      - certbot-webroot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx

  # ==========================================================================
  # Loki - Log Aggregation
  # ==========================================================================
  loki:
    image: grafana/loki:latest
    container_name: shivx-loki
    ports:
      - "3100:3100"
    networks:
      - shivx-network
    restart: unless-stopped
    volumes:
      - ./loki/loki-config.yml:/etc/loki/loki-config.yml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/loki-config.yml

  # ==========================================================================
  # Promtail - Log Shipper
  # ==========================================================================
  promtail:
    image: grafana/promtail:latest
    container_name: shivx-promtail
    networks:
      - shivx-network
    restart: unless-stopped
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/promtail-config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log:/var/log:ro
      - nginx-logs:/var/log/nginx:ro
      - postgres-logs:/var/lib/postgresql/logs:ro
      - shivx-logs:/app/logs:ro
    command: -config.file=/etc/promtail/promtail-config.yml
    depends_on:
      - loki

  # ==========================================================================
  # Jaeger Tracing
  # ==========================================================================
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: shivx-jaeger
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
    networks:
      - shivx-network
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true

# ==========================================================================
# Networks
# ==========================================================================
networks:
  shivx-network:
    driver: bridge

# ==========================================================================
# Volumes
# ==========================================================================
volumes:
  postgres-data:
  postgres-wal-archive:
  postgres-logs:
  redis-data:
  prometheus-data:
  alertmanager-data:
  grafana-data:
  loki-data:
  shivx-logs:
  shivx-data:
  shivx-models:
  nginx-cache:
  nginx-logs:
  certbot-certs:
  certbot-webroot:
