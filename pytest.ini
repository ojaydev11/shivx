# ShivX Pytest Configuration
# ==========================

[pytest]
# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = tests

# Minimum Python version
minversion = 8.0

# Additional command-line options
addopts =
    # Verbose output
    -v
    # Show extra test summary info
    -ra
    # Show local variables in tracebacks
    --showlocals
    # Strict markers (fail on unknown markers)
    --strict-markers
    # Warnings
    -W default
    # Coverage options (when --cov is used)
    --cov-report=term-missing
    --cov-report=html:release/artifacts/coverage_report.html
    --cov-branch
    # Parallel execution (use -n auto for full parallelism)
    # -n auto
    # Timeout for tests (prevent hangs)
    --timeout=300
    # Color output
    --color=yes

# Register custom markers to avoid warnings
markers =
    asyncio: Mark test as async (using pytest-asyncio)
    slow: Mark test as slow (can be skipped with -m "not slow")
    security: Security-focused tests
    integration: Integration tests (require external services)
    e2e: End-to-end tests
    smoke: Smoke tests for quick validation
    skip_if_no_playwright: Skip if Playwright is not available
    unit: Unit tests (default)
    requires_gpu: Tests that require GPU
    requires_network: Tests that require network access
    chaos: Chaos/resilience tests
    load: Load/performance tests

# Asyncio configuration
asyncio_mode = auto

# Coverage configuration
[coverage:run]
source = .
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */.venv/*
    */node_modules/*
    */dist/*
    */build/*
    */scripts/*
    */demos/*
    */examples/*
    */temp*/*
    */var/*
    */logs/*
    */memory/*
    */data/*
    */backups/*
    */browser_profiles/*
    */.pytest_cache/*
    */.mypy_cache/*
    */.ruff_cache/*

[coverage:report]
precision = 2
skip_covered = False
show_missing = True
sort = Cover

# Exclude from coverage
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod
    class .*\bProtocol\):
    @overload

# Target coverage thresholds
fail_under = 0  # Will be increased incrementally

[coverage:html]
directory = release/artifacts/coverage_report.html
