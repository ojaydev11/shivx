# ShivX AGI - Enhanced Production Deployment Pipeline
# Multi-stage deployment with staging, approval gates, and comprehensive testing

name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v2.0.0)'
        required: true
      skip_staging:
        description: 'Skip staging deployment (emergency only)'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # Stage 1: Build
  # ============================================================================
  build:
    name: Build & Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Run security scans
        run: |
          pip install bandit safety
          bandit -r app core utils -f json -o bandit-report.json || true
          safety check || true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ github.event.inputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ github.event.inputs.version }}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.event.inputs.version }}
            BUILD_DATE=${{ github.event.repository.updated_at }}

  # ============================================================================
  # Stage 2: Test (Unit, Integration, E2E)
  # ============================================================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: shivx
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: shivx_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=app --cov=core --cov=utils --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml

  # ============================================================================
  # Stage 3: Deploy to Staging
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: ${{ !inputs.skip_staging }}
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS Staging
        id: deploy
        run: |
          aws ecs update-service \
            --cluster shivx-agi-staging \
            --service shivx-agi-api \
            --force-new-deployment

          aws ecs wait services-stable \
            --cluster shivx-agi-staging \
            --services shivx-agi-api

          LB_URL=$(aws elbv2 describe-load-balancers \
            --names shivx-agi-staging \
            --query 'LoadBalancers[0].DNSName' \
            --output text)

          echo "url=https://${LB_URL}" >> $GITHUB_OUTPUT

  # ============================================================================
  # Stage 4: Smoke Tests on Staging
  # ============================================================================
  smoke-tests-staging:
    name: Smoke Tests (Staging)
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: ${{ !inputs.skip_staging }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for service warmup
        run: sleep 30

      - name: Health check
        run: |
          curl -f ${{ needs.deploy-staging.outputs.url }}/health/live || exit 1

      - name: API smoke tests
        run: |
          # Test authentication
          curl -f ${{ needs.deploy-staging.outputs.url }}/api/health/ready || exit 1

          # Test critical endpoints
          ./scripts/smoke_tests.sh ${{ needs.deploy-staging.outputs.url }}

      - name: Performance check
        run: |
          # Check response times
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' ${{ needs.deploy-staging.outputs.url }}/health)
          echo "Response time: ${RESPONSE_TIME}s"

          if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
            echo "Response time too slow: ${RESPONSE_TIME}s"
            exit 1
          fi

  # ============================================================================
  # Stage 5: Manual Approval Gate
  # ============================================================================
  approval:
    name: Approval for Production
    runs-on: ubuntu-latest
    needs: smoke-tests-staging
    if: ${{ !inputs.skip_staging }}
    environment:
      name: production-approval

    steps:
      - name: Wait for approval
        run: |
          echo "Waiting for manual approval to deploy to production..."
          echo "Review staging deployment before approving."

  # ============================================================================
  # Stage 6: Deploy to Production
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, approval]
    if: always() && (needs.approval.result == 'success' || inputs.skip_staging)
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Store current task definition (for rollback)
        id: current
        run: |
          CURRENT_TASK_DEF=$(aws ecs describe-services \
            --cluster shivx-agi-production \
            --services shivx-agi-api \
            --query 'services[0].taskDefinition' \
            --output text)

          echo "task-def=${CURRENT_TASK_DEF}" >> $GITHUB_OUTPUT
          echo "Stored current task definition: ${CURRENT_TASK_DEF}"

      - name: Deploy to ECS Production
        id: deploy
        run: |
          aws ecs update-service \
            --cluster shivx-agi-production \
            --service shivx-agi-api \
            --force-new-deployment

          aws ecs wait services-stable \
            --cluster shivx-agi-production \
            --services shivx-agi-api

          LB_URL=$(aws elbv2 describe-load-balancers \
            --names shivx-agi-production \
            --query 'LoadBalancers[0].DNSName' \
            --output text)

          echo "url=https://${LB_URL}" >> $GITHUB_OUTPUT

  # ============================================================================
  # Stage 7: Smoke Tests on Production
  # ============================================================================
  smoke-tests-production:
    name: Smoke Tests (Production)
    runs-on: ubuntu-latest
    needs: deploy-production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for service warmup
        run: sleep 30

      - name: Health check
        run: |
          curl -f ${{ needs.deploy-production.outputs.url }}/health/live || exit 1

      - name: API smoke tests
        run: |
          curl -f ${{ needs.deploy-production.outputs.url }}/api/health/ready || exit 1
          ./scripts/smoke_tests.sh ${{ needs.deploy-production.outputs.url }}

      - name: Deployment metrics
        run: |
          echo "Deployment completed at: $(date -u)"
          echo "Version: ${{ github.event.inputs.version }}"

  # ============================================================================
  # Stage 8: Notifications
  # ============================================================================
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: smoke-tests-production
    if: success()

    steps:
      - name: Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ✅ ShivX AGI deployed to production!
            Version: ${{ github.event.inputs.version }}
            URL: ${{ needs.deploy-production.outputs.url }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ============================================================================
  # Stage 9: Rollback on Failure
  # ============================================================================
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production, smoke-tests-production]
    if: failure()

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Rollback to previous version
        run: |
          PREVIOUS_TASK_DEF="${{ needs.deploy-production.outputs.task-def }}"

          aws ecs update-service \
            --cluster shivx-agi-production \
            --service shivx-agi-api \
            --task-definition $PREVIOUS_TASK_DEF

          echo "Rolled back to: $PREVIOUS_TASK_DEF"

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          text: |
            ⚠️ ShivX AGI deployment rolled back!
            Version: ${{ github.event.inputs.version }}
            Reason: Deployment or smoke tests failed
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
