# ShivX AGI - Production Deployment Pipeline
# Auto-generated by ShivX autonomous implementation (Week 25)
# Supervisor: Claude Code + Human

name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v2.0.0)'
        required: true
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ github.event.inputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ github.event.inputs.version }}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.shivx
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Run Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run comprehensive test suite
        run: |
          python core/testing/comprehensive_test_suite.py

      - name: Check test results
        run: |
          if [ $? -eq 0 ]; then
            echo "All tests passed!"
          else
            echo "Tests failed!"
            exit 1
          fi

  # Deploy to Environment
  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: ${{ github.event.inputs.environment }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS
        id: deploy
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster shivx-agi-${{ github.event.inputs.environment }} \
            --service shivx-agi-api \
            --force-new-deployment

          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster shivx-agi-${{ github.event.inputs.environment }} \
            --services shivx-agi-api

          # Get load balancer URL
          LB_URL=$(aws elbv2 describe-load-balancers \
            --names shivx-agi-${{ github.event.inputs.environment }} \
            --query 'LoadBalancers[0].DNSName' \
            --output text)

          echo "url=https://${LB_URL}" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        run: |
          # Wait for service to be healthy
          sleep 30

          # Run basic health check
          curl -f ${{ steps.deploy.outputs.url }}/health || exit 1

          # Run critical workflow test
          curl -f -X POST ${{ steps.deploy.outputs.url }}/api/workflows \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.API_KEY }}" \
            -d '{"type": "health_check"}' || exit 1

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            ShivX AGI deployed to ${{ github.event.inputs.environment }}!
            Version: ${{ github.event.inputs.version }}
            URL: ${{ steps.deploy.outputs.url }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: success()

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            ShivX AGI deployment to ${{ github.event.inputs.environment }} FAILED!
            Version: ${{ github.event.inputs.version }}
            Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: failure()

  # Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Rollback to previous version
        run: |
          # Get previous task definition
          PREVIOUS_TASK_DEF=$(aws ecs describe-services \
            --cluster shivx-agi-${{ github.event.inputs.environment }} \
            --services shivx-agi-api \
            --query 'services[0].deployments[1].taskDefinition' \
            --output text)

          # Rollback to previous task definition
          aws ecs update-service \
            --cluster shivx-agi-${{ github.event.inputs.environment }} \
            --service shivx-agi-api \
            --task-definition $PREVIOUS_TASK_DEF

          echo "Rolled back to previous version: $PREVIOUS_TASK_DEF"

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          text: |
            ShivX AGI deployment rolled back!
            Environment: ${{ github.event.inputs.environment }}
            Reason: Deployment or smoke tests failed
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
